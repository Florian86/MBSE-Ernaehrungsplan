package transf;

import com.google.common.base.Objects;
import ep.EpElement;
import ep.Ernaehrungsplan;
import ep.Gericht;
import ep.Gericht2Zutat;
import ep.Person;
import ep.Zutat;
import java.io.File;
import java.io.FileOutputStream;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import transf.ModelLoader;

@SuppressWarnings("all")
public class M2T {
  private ModelLoader loader = new ModelLoader();
  
  private List<Ernaehrungsplan> eplans;
  
  private List<Gericht> meals;
  
  private EpElement epElement;
  
  private File targetLatexFile;
  
  private File targetHtmlFile_EP;
  
  private File targetHtmlFile_EL;
  
  private FileOutputStream latexStream;
  
  private FileOutputStream htmlStream_EP;
  
  private FileOutputStream htmlStream_EL;
  
  private String latexOutput;
  
  private String htmlOutput_EP;
  
  private String htmlOutput_EL;
  
  private String current_personname;
  
  public Object M2T() {
    return null;
  }
  
  public static void main(final String[] args) {
    InputOutput.<String>println("Starte Generierung des Ernährungsplans.");
    final M2T m2t = new M2T();
    m2t.generate("src/metamodel", "test");
    InputOutput.<String>println("Generierung beendet.");
  }
  
  public void generate(final String folder, final String file) {
    try {
      boolean _fileExists = this.fileExists(folder, file);
      boolean _not = (!_fileExists);
      if (_not) {
        InputOutput.<String>println(((("Datei nicht vorhanden " + folder) + "") + file));
        return;
      }
      EpElement _loadModel = this.loader.loadModel(folder, file);
      this.epElement = _loadModel;
      EList<Ernaehrungsplan> _eplanElement = this.epElement.getEplanElement();
      this.eplans = _eplanElement;
      for (final Ernaehrungsplan e : this.eplans) {
        {
          Person _personen = e.getPersonen();
          String _name = _personen.getName();
          this.current_personname = _name;
          EList<Gericht> _gerichte = e.getGerichte();
          this.meals = _gerichte;
          File _file = new File(((("output" + File.separator) + this.current_personname) + "_Latex.tex"));
          this.targetLatexFile = _file;
          this.targetLatexFile.createNewFile();
          FileOutputStream _fileOutputStream = new FileOutputStream(this.targetLatexFile);
          this.latexStream = _fileOutputStream;
          String _generateLatex = this.generateLatex(e);
          String _replaceAll = _generateLatex.replaceAll("\"", "");
          this.latexOutput = _replaceAll;
          byte[] _bytes = this.latexOutput.getBytes();
          this.latexStream.write(_bytes);
          this.latexStream.close();
          File _file_1 = new File(((("output" + File.separator) + this.current_personname) + "_EP_HTML.html"));
          this.targetHtmlFile_EP = _file_1;
          this.targetHtmlFile_EP.createNewFile();
          FileOutputStream _fileOutputStream_1 = new FileOutputStream(this.targetHtmlFile_EP);
          this.htmlStream_EP = _fileOutputStream_1;
          String _generateHtmlSchedule = this.generateHtmlSchedule(e);
          this.htmlOutput_EP = _generateHtmlSchedule;
          byte[] _bytes_1 = this.htmlOutput_EP.getBytes();
          this.htmlStream_EP.write(_bytes_1);
          this.htmlStream_EP.close();
          File _file_2 = new File(((("output" + File.separator) + this.current_personname) + "_EL_HTML.html"));
          this.targetHtmlFile_EL = _file_2;
          this.targetHtmlFile_EL.createNewFile();
          FileOutputStream _fileOutputStream_2 = new FileOutputStream(this.targetHtmlFile_EL);
          this.htmlStream_EL = _fileOutputStream_2;
          String _generateHtmlShoppingList = this.generateHtmlShoppingList(e);
          this.htmlOutput_EL = _generateHtmlShoppingList;
          byte[] _bytes_2 = this.htmlOutput_EL.getBytes();
          this.htmlStream_EL.write(_bytes_2);
          this.htmlStream_EL.close();
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * "Startmethode" der Latex-Generierung
   * ohne p erstmal !!!!!!!!!!
   */
  public String generateLatex(final Ernaehrungsplan e) {
    StringConcatenation _builder = new StringConcatenation();
    String _generateLatexHead = this.generateLatexHead();
    _builder.append(_generateLatexHead, "");
    _builder.newLineIfNotEmpty();
    _builder.append("\\begin{document}");
    _builder.newLine();
    String _generateLatexSchedule = this.generateLatexSchedule(e);
    _builder.append(_generateLatexSchedule, "");
    _builder.newLineIfNotEmpty();
    _builder.append("\\newpage");
    _builder.newLine();
    String _generateLatexShoppingList = this.generateLatexShoppingList(e);
    _builder.append(_generateLatexShoppingList, "");
    _builder.newLineIfNotEmpty();
    _builder.append("\\end{document}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String generateLatexHead() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\\documentclass[10pt, a4paper]{article}");
    _builder.newLine();
    _builder.append("\\usepackage[a4paper, bottom=2.0cm, top=2.0cm]{geometry}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\\usepackage[utf8]{inputenc}");
    _builder.newLine();
    _builder.append("\\usepackage[ngerman]{babel}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\\pagestyle{empty}");
    _builder.newLine();
    _builder.append("\\parindent0pt");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\\usepackage{tabularx}");
    _builder.newLine();
    _builder.append("\\usepackage{multirow}");
    _builder.newLine();
    _builder.append("\\newcolumntype{C}{>{\\centering\\arraybackslash}X}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\\usepackage{pdflscape}");
    _builder.newLine();
    _builder.append("\\usepackage{ragged2e}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\\usepackage{enumitem} ");
    _builder.newLine();
    _builder.append("\\setitemize{leftmargin=*}");
    _builder.newLine();
    _builder.newLine();
    return _builder.toString();
  }
  
  /**
   * Generiert den Ernährungsplan für Latex.
   */
  public String generateLatexSchedule(final Ernaehrungsplan e) {
    String _xblockexpression = null;
    {
      int kcal = 0;
      int[] kcal_array = new int[7];
      String[] name_array = new String[7];
      int i = 0;
      for (final Gericht g : this.meals) {
        {
          EList<Gericht2Zutat> _zutaten = g.getZutaten();
          for (final Gericht2Zutat z : _zutaten) {
            Zutat _zutat = z.getZutat();
            int _kcal = _zutat.getKcal();
            int _menge = z.getMenge();
            int _multiply = (_kcal * _menge);
            int _divide = (_multiply / 100);
            int _plus = (kcal + _divide);
            kcal = _plus;
          }
          if ((i <= 6)) {
            String _name = g.getName();
            name_array[i] = _name;
            kcal_array[i] = kcal;
            i++;
          }
          kcal = 0;
        }
      }
      StringConcatenation _builder = new StringConcatenation();
      _builder.newLine();
      _builder.append("\\begin{landscape}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("{\\Large \\textbf{Ernährungsplan}} \\medskip \\\\");
      _builder.newLine();
      _builder.append("\t");
      _builder.append(this.current_personname, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("\\\\ Empfohlener Energiebedarf pro Woche: ");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      Person _personen = e.getPersonen();
      int _kcal = _personen.getKcal();
      _builder.append(_kcal, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t ");
      _builder.append("Kalorien $\\rightarrow$ ");
      _builder.newLine();
      _builder.append("\t");
      Person _personen_1 = e.getPersonen();
      int _kcal_1 = _personen_1.getKcal();
      int _divide = (_kcal_1 / 7);
      _builder.append(_divide, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("Kalorien pro Tag \\medskip \\\\");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\\renewcommand*{\\arraystretch}{1.2}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\\begin{tabularx}{\\linewidth}{|X|X|X|X|X|X|X|}\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\hline");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\Centering \\multirow{2}{*}{\\textbf{Montag}} & \\Centering \\multirow{2}{*}{\\textbf{Dienstag}} & \\Centering \\multirow{2}{*}{\\textbf{Mittwoch}} & \\Centering \\multirow{2}{*}{\\textbf{Donnerstag}} & \\Centering \\multirow{2}{*}{\\textbf{Freitag}} & \\Centering \\multirow{2}{*}{\\textbf{Samstag}} & \\Centering \\multirow{2}{*}{\\textbf{Sonntag}} \\\\");
      _builder.newLine();
      _builder.append("%\t\t&  &  &  &  &  &  \\\\");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("&  &  &  &  &  &  \\\\");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\hline");
      _builder.newLine();
      _builder.append("\t\t");
      String _get = name_array[0];
      _builder.append(_get, "\t\t");
      _builder.append("\t\\newline {\\scriptsize ");
      int _get_1 = kcal_array[0];
      _builder.append(_get_1, "\t\t");
      _builder.append(" kcal} ");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("\\begin{small}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\begin{itemize}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\itemsep0pt");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("\\item 100g Spaghetti");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("\\item 200g Bolognesesoße ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("\\smallskip");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\end{itemize}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\end{small}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\begin{scriptsize}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Anmerkung: Gericht ist in Buch blablabla auf S.30 zu finden.");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\end{scriptsize}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("& ");
      String _get_2 = name_array[1];
      _builder.append(_get_2, "\t\t");
      _builder.append(" \\newline {\\scriptsize ");
      int _get_3 = kcal_array[1];
      _builder.append(_get_3, "\t\t");
      _builder.append(" kcal} ");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("\\begin{small}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\begin{itemize}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\itemsep0pt");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("\\item 500g Kartoffeln");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("\\item 200g Rührei ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("\\item 100g Spinat");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\end{itemize}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\end{small}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("& ");
      String _get_4 = name_array[2];
      _builder.append(_get_4, "\t\t");
      _builder.append(" \\newline {\\scriptsize ");
      int _get_5 = kcal_array[2];
      _builder.append(_get_5, "\t\t");
      _builder.append(" kcal}  ");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("\\begin{small}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\begin{itemize}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\itemsep0pt");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("\\item 300g Pfannkuchen");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\end{itemize}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\end{small}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("&  ");
      String _get_6 = name_array[3];
      _builder.append(_get_6, "\t\t");
      _builder.append(" \\newline {\\scriptsize ");
      int _get_7 = kcal_array[3];
      _builder.append(_get_7, "\t\t");
      _builder.append(" kcal}  ");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("\\begin{small}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\begin{itemize}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\itemsep0pt");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("\\item 500g Kartoffeln");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("\\item 200g Rührei ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("\\item 100g Spinat");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\end{itemize}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\end{small}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("&  ");
      String _get_8 = name_array[4];
      _builder.append(_get_8, "\t\t");
      _builder.append(" \\newline {\\scriptsize ");
      int _get_9 = kcal_array[4];
      _builder.append(_get_9, "\t\t");
      _builder.append(" kcal}  ");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("\\begin{small}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\begin{itemize}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\itemsep0pt");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("\\item 500g Kartoffelbrei");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("\\item 200g Rührei ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("\\item 100g Spinat");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\end{itemize}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\end{small}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("&  ");
      String _get_10 = name_array[5];
      _builder.append(_get_10, "\t\t");
      _builder.append(" \\newline {\\scriptsize ");
      int _get_11 = kcal_array[5];
      _builder.append(_get_11, "\t\t");
      _builder.append(" kcal}  ");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("\\begin{small}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\begin{itemize}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\itemsep0pt");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("\\item 500g Zungenragout");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("\\item 200g Rührei ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("\\item 100g Spinat");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\end{itemize}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\end{small}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("&  ");
      String _get_12 = name_array[6];
      _builder.append(_get_12, "\t\t");
      _builder.append(" \\newline {\\scriptsize ");
      int _get_13 = kcal_array[6];
      _builder.append(_get_13, "\t\t");
      _builder.append(" kcal}  ");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("\\begin{small}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\begin{itemize}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\itemsep0pt");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("\\item 500g Kartoffeln");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("\\item 200g Rührei ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("\\item 100g Rotkohl ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\end{itemize}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\end{small} ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\\\");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\hline");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("& & Salat \\newline {\\scriptsize 300 kcal} ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\begin{small}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\begin{itemize}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\itemsep0pt");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("\\item 500g Salat");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("\\item 50ml Dressing");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\end{itemize}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\end{small}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("& & & & Salat \\newline {\\scriptsize 300 kcal}  ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\begin{small}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\begin{itemize}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\itemsep0pt");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("\\item 500g Salat");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("\\item 50ml Dressing");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\end{itemize}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\end{small}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\\\");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\hline");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("\\end{tabularx} \\medskip \\\\ ");
      _builder.newLine();
      _builder.append("Für diese Woche wurden xxxxx von 14.000 kcal verbraucht. ");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\\end{landscape}");
      _builder.newLine();
      _xblockexpression = _builder.toString();
    }
    return _xblockexpression;
  }
  
  /**
   * Generiert die Einkaufsliste für Latex.
   */
  public String generateLatexShoppingList(final Ernaehrungsplan e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{\\Large \\textbf{Einkaufsliste}} \\medskip \\\\");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\\begin{itemize}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\\item 100g Spaghetti ($\\rightarrow$ 100 = Mo + Di + Mi + ... + So)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\\item 500g Kartoffeln ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\\item ");
    _builder.newLine();
    _builder.append("\\end{itemize}");
    _builder.newLine();
    return _builder.toString();
  }
  
  /**
   * Generiert den Ernährungsplan für HTML.
   */
  public String generateHtmlSchedule(final Ernaehrungsplan e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!DOCTYPE html>");
    _builder.newLine();
    _builder.append("<html lang=\"en\">");
    _builder.newLine();
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<meta charset=\"utf-8\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<title>Ernährungsplan</title>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- Bootstrap -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<link href=\"../html/css/bootstrap.min.css\" rel=\"stylesheet\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<link href=\"../html/css/style_EP.css\" rel=\"stylesheet\">");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- WARNING: Respond.js doesn\'t work if you view the page via file:// -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!--[if lt IE 9]>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<![endif]-->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</head>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<body>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<div class=\"container\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<h1>Ernährungsplan</h1>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<p>");
    _builder.append(this.current_personname, "          ");
    _builder.append("<br />Empfohlener Energiebedarf pro Woche: 14.000 Kalorien &rarr; 2.000 Kalorien pro Tag</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("          ");
    _builder.append("<table class=\"table table-bordered\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<thead>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<tr>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<th>Montag</th>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<th>Dienstag</th>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<th>Mittwoch</th>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<th>Donnerstag</th>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<th>Freitag</th>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<th>Samstag</th>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<th>Sonntag</th>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("</tr>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</thead>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<tbody>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<tr>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<td>Spaghetti Bolognese <br /> <small>1000 kcal</small><br /> ");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("<ul>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>100g Spaghetti</li>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>200g Bolognesesoße</li>");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</td>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<td>Gericht A <br /> <small>1000 kcal</small><br /> ");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("<ul>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>500g Kartoffeln</li>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>200g Rührei</li>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>100g Spinat</li>");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("</ul> ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</td>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<td>Pfannkuchen <br /> <small>500 kcal</small><br /> ");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("<ul> ");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>300g Pfannkuchen</li>");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</td>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<td>Gericht A <br /> <small>1000 kcal</small><br /> ");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("<ul>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>500g Kartoffeln</li>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>200g Rührei</li>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>100g Spinat</li>");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("</ul> ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</td>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<td>Gericht A <br /> <small>1000 kcal</small><br /> ");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("<ul>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>500g Kartoffelbrei</li>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>200g Rührei</li>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>100g Spinat</li>");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("</ul> ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</td>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<td>Gericht A <br /> <small>1000 kcal</small><br /> ");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("<ul>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>500g Zungenragout</li>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>200g Rührei</li>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>100g Spinat</li>");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("</ul> ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</td>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<td>Gericht A <br /> <small>1000 kcal</small><br /> ");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("<ul>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>500g Kartoffeln</li>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>200g Rührei</li>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>100g Rotkohl</li>");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("</ul> ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</td>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("</tr>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<tr>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<td></td>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<td></td>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<td>Salat <br /> <small>300 kcal</small><br /> ");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("<ul>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>500g Salat</li>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>50ml Dressing</li>");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</td>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<td></td>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<td></td>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<td></td>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<td>Salat <br /> <small>300 kcal</small><br /> ");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("<ul>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>500g Salat</li>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>50ml Dressing</li>");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</td>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("</tr>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</tbody>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("</table>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<p>Für diese Woche wurden xxxxx von 14.000 kcal verbraucht.</p>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<!-- jQuery (necessary for Bootstrap\'s JavaScript plugins) -->");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"></script>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<!-- Include all compiled plugins (below), or include individual files as needed -->");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<script src=\"../html/js/bootstrap.min.js\"></script>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</html>");
    _builder.newLine();
    return _builder.toString();
  }
  
  /**
   * Generiert die Einkaufsliste für HTML.
   */
  public String generateHtmlShoppingList(final Ernaehrungsplan e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!DOCTYPE html>");
    _builder.newLine();
    _builder.append("<html lang=\"en\">");
    _builder.newLine();
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<meta charset=\"utf-8\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<title>Einkaufsliste</title>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<!-- Bootstrap -->");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<link href=\"../html/css/bootstrap.min.css\" rel=\"stylesheet\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<link href=\"../html/css/style_EL.css\" rel=\"stylesheet\">");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<!-- WARNING: Respond.js doesn\'t work if you view the page via file:// -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!--[if lt IE 9]>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<![endif]-->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</head>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<body>");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("<div class=\"container\">");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("<h1>Einkaufsliste</h1>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<ul>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<li>100g Spaghetti</li>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<li>500g Kartoffeln</li>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("<!-- jQuery (necessary for Bootstrap\'s JavaScript plugins) -->");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"></script>");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("<!-- Include all compiled plugins (below), or include individual files as needed -->");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("<script src=\"../html/js/bootstrap.min.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</html>");
    _builder.newLine();
    return _builder.toString();
  }
  
  public boolean fileExists(final String folder, final String file) {
    final StringBuffer path = new StringBuffer();
    path.append(folder);
    int _length = folder.length();
    int _minus = (_length - 1);
    char _charAt = folder.charAt(_minus);
    boolean _notEquals = (!Objects.equal(Character.valueOf(_charAt), "/"));
    if (_notEquals) {
      path.append("/");
    }
    path.append(file);
    path.append(".ep");
    String _string = path.toString();
    final File f = new File(_string);
    boolean _and = false;
    boolean _exists = f.exists();
    if (!_exists) {
      _and = false;
    } else {
      boolean _isDirectory = f.isDirectory();
      boolean _not = (!_isDirectory);
      _and = _not;
    }
    if (_and) {
      return true;
    }
    return false;
  }
}
